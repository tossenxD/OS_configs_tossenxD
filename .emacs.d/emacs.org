#+title: GNU Emacs Configuration
#+author: Thorbjørn Bülow Bringgaard

* Table of Contents :toc:
- [[#package-management][Package Management]]
  - [[#package-archives][Package Archives]]
  - [[#installing-packages][Installing Packages]]
- [[#layout][Layout]]
  - [[#theme-customization][Theme Customization]]
  - [[#faces--text-customization][Faces & Text Customization]]
  - [[#frame-customization][Frame Customization]]
  - [[#mode-line][Mode line]]
- [[#programs][Programs]]
  - [[#pdf-rendering][PDF Rendering]]
- [[#languages][Languages]]
  - [[#emacs-lisp][Emacs-lisp]]
  - [[#org][Org]]
  - [[#c-and-c-likes][C and C-likes]]
  - [[#latex][LaTeX]]
  - [[#markdown][Markdown]]
  - [[#asciidoc][Asciidoc]]
  - [[#futhark][Futhark]]
  - [[#cuda][CUDA]]
  - [[#nix][Nix]]

* Package Management
** Package Archives
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
  (package-refresh-contents)
#+end_src

** Installing Packages
Defines a function `get-package` s.t:
  - (get-package pkg) ::
    install `pkg` \to require `pkg`
  - (get-package pkg pkg-req) ::
    install `pkg` \to require `pkg-reg`
  - (get-package pkg pkg-req mode) ::
    install `pkg` \to require (see above) \to auto determine major-mode according to `mode`
  - (get-package pkg pkg-req mode init-fun args) ::
    install `pkg` \to apply `init-fun` to `args` \to require (see above) \to mode (see above)
#+begin_src emacs-lisp
  (defun get-package (pkg &optional pkg-req mode init-fun &rest args)
    (unless (package-installed-p pkg) (package-install pkg))
    (when init-fun (apply init-fun args))
    (if pkg-req (require pkg-req) (require pkg))
    (when mode (add-to-list 'auto-mode-alist mode)))
#+end_src

* Layout
** Theme Customization
#+begin_src emacs-lisp
  (get-package 'gruvbox-theme)
  (load-theme 'gruvbox-dark-medium t)
#+end_src

** Faces & Text Customization
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :family "DejaVu Sans Mono" :height 112)
  (setq-default frame-resize-pixelwise t)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (setq-default indent-tabs-mode nil)
  (setq-default fill-column 80)
  (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
#+end_src

** Frame Customization
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+end_src

** Mode line
#+begin_src emacs-lisp
  (setq-default column-number-mode t)
#+end_src

* Programs
** PDF Rendering
#+begin_src emacs-lisp
  (get-package 'pdf-tools nil '("\\.pdf\\'" . pdf-tools) 'pdf-tools-install t)
#+end_src

* Languages
** Emacs-lisp
#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'prettify-symbols-mode)
#+end_src

** Org
#+begin_src emacs-lisp
  (get-package 'toc-org)
  (get-package 'org-bullets)
  (add-hook 'org-mode-hook 'toc-org-mode)
  (add-hook 'org-mode-hook 'org-bullets-mode)
  (setq-default org-pretty-entities t)
  (setq-default org-support-shift-select t)
#+end_src

** C and C-likes
#+begin_src emacs-lisp
  (setq-default c-basic-offset 4)
  (add-hook 'c++-mode-hook (lambda () (set-fill-column 100)))
#+end_src

** LaTeX
*** AUCTeX
See more with: `C-h i m auctex`
#+begin_src emacs-lisp
  (get-package 'auctex 'tex)
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
#+end_src

*** RefTeX
See more with: `C-h i m reftex`
#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)
#+end_src

*** CDLaTeX
See more at: https://www.gnu.org/software/emacs/manual/html_node/org/CDLaTeX-mode.html
#+begin_src emacs-lisp
  (get-package 'cdlatex)
  (add-hook 'LaTeX-mode-hook #'turn-on-cdlatex)
#+end_src

*** Compilation
`C-c C-a` to compile and view. `C-c C-g` to correlate view to source mark.
#+begin_src emacs-lisp
  (setq TeX-save-query nil)
  (setq TeX-show-compilation nil)
  (setq TeX-PDF-mode t)
  (add-hook 'LaTeX-mode-hook (lambda ()
                               (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
                                     TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
                                     TeX-source-correlate-start-server t)
                               (add-to-list 'TeX-command-list '("LaTeX" "%`pdflatex -shell-escape --synctex=1%(mode)%' %t" TeX-run-TeX nil t))
                               (define-key LaTeX-mode-map (kbd "C-c C-g") #'pdf-sync-forward-search)
                               (setq TeX-command-default "LaTeX")
                               (setq pdf-sync-backward-display-action t
                                     pdf-sync-forward-display-action t
                                     TeX-source-correlate-mode t
                                     TeX-source-correlate-method '((dvi . source-specials) (pdf . synctex)))
                               (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
                               ))
#+end_src

*** Prettification
Configurations that makes LaTeX source more readable (especially math).
#+begin_src emacs-lisp
  (setq prettify-symbols-unprettify-at-point 'right-edge)
  (add-hook 'TeX-mode-hook (lambda () (prettify-symbols-mode)))
#+end_src

*** Spelling
#+begin_src emacs-lisp
  (add-hook 'TeX-mode-hook (lambda () (flyspell-mode 1)))
#+end_src

** Markdown
Markdown depends on a markdown processor for parsing - set in PROCESSOR.
#+begin_src emacs-lisp :var PROCESSOR = "cmark"
  (get-package 'markdown-mode nil '("README\\.md\\'" . gfm-mode)
	       '(lambda () (setq markdown-command PROCESSOR)))
#+end_src

** Asciidoc
#+begin_src emacs-lisp
  (get-package 'adoc-mode)
#+end_src

** Futhark
#+begin_src emacs-lisp
  (get-package 'futhark-mode)
#+end_src

** CUDA
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\.cu$" . c++-mode))
  (add-to-list 'auto-mode-alist '("\.cu.h$" . c++-mode))
#+end_src

** Nix
Provides Nix language support and a NixOS option search function,
which is bound to `C-c C-n` in any .nix file buffers.
#+begin_src emacs-lisp
  (get-package 'nix-mode nil '("\\.nix\\'" . nix-mode))
  (get-package 'helm-nixos-options)
  (with-eval-after-load 'nix-mode
    (define-key nix-mode-map (kbd "C-c C-n") 'helm-nixos-options))
#+end_src
