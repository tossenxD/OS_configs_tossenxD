#+title: GNU Emacs Configuration
#+author: Thorbjørn Bülow Bringgaard

* Table of Contents :toc:
- [[#package-management][Package Management]]
  - [[#package-archives][Package Archives]]
  - [[#installing-packages][Installing Packages]]
- [[#layout][Layout]]
  - [[#theme-customization][Theme Customization]]
  - [[#faces--text-customization][Faces & Text Customization]]
  - [[#frame-customization][Frame Customization]]
- [[#programs][Programs]]
  - [[#pdf-rendering][PDF Rendering]]
- [[#languages][Languages]]
  - [[#org][Org]]
  - [[#latex][LaTeX]]
  - [[#markdown][Markdown]]
  - [[#asciidoc][Asciidoc]]
  - [[#futhark][Futhark]]

* Package Management
** Package Archives
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
  (package-refresh-contents)
#+end_src

** Installing Packages
Defines a function `get-package` s.t:
  - (get-package pkg) ::
    install `pkg` \to require `pkg`
  - (get-package pkg pkg-req) ::
    install `pkg` \to require `pkg-reg`
  - (get-package pkg pkg-req mode) ::
    install `pkg` \to require (see above) \to auto determine major-mode according to `mode`
  - (get-package pkg pkg-req mode init-fun args) ::
    install `pkg` \to apply `init-fun` to `args` \to require (see above) \to mode (see above)
#+begin_src emacs-lisp
  (defun get-package (pkg &optional pkg-req mode init-fun &rest args)
    (unless (package-installed-p pkg) (package-install pkg))
    (when init-fun (apply init-fun args))
    (if pkg-req (require pkg-req) (require pkg))
    (when mode (add-to-list 'auto-mode-alist mode)))
#+end_src

* Layout
** Theme Customization
#+begin_src emacs-lisp
  (get-package 'gruvbox-theme)
  (load-theme 'gruvbox-dark-hard t)
#+end_src

** Faces & Text Customization
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :height 130)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+end_src

** Frame Customization
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+end_src

* Programs
** PDF Rendering
#+begin_src emacs-lisp
  (get-package 'pdf-tools nil '("\\.pdf\\'" . pdf-tools) 'pdf-tools-install t)
#+end_src

* Languages
** Org
#+begin_src emacs-lisp
  (get-package 'toc-org)
  (get-package 'org-bullets)
  (add-hook 'org-mode-hook 'toc-org-mode)
  (add-hook 'org-mode-hook 'org-bullets-mode)
  (setq-default org-pretty-entities t)
#+end_src

** LaTeX
#+begin_src emacs-lisp
  (get-package 'auctex 'tex-site)
  ;;(add-to-list 'TeX-view-program-selection (list 'output-pdf "PDF Tools"))
#+end_src

** Markdown
Markdown depends on a markdown processor for parsing - set in PROCESSOR.
#+begin_src emacs-lisp :var PROCESSOR = "cmark"
  (get-package 'markdown-mode nil '("README\\.md\\'" . gfm-mode)
	       '(lambda () (setq markdown-command PROCESSOR)))
#+end_src

** Asciidoc
#+begin_src emacs-lisp
  (get-package 'adoc-mode)
#+end_src

** Futhark
#+begin_src emacs-lisp
  (get-package 'futhark-mode)
#+end_src
